import React, { useEffect, useState } from 'react';
import {
  Table, TableHead, TableRow, TableCell,
  TableBody, Paper, Typography, TableContainer, Select, MenuItem, Chip, Button, Box
} from '@mui/material';
import { Payment } from '../types/Payment';
import { updateUserSubscription } from '../services/AdminService';
import axios from 'axios';

interface PaymentsTableProps {
  adminId: number;
}

const PaymentsTable: React.FC<PaymentsTableProps> = ({ adminId }) => {
  const [payments, setPayments] = useState<Payment[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchPayments = async () => {
    setLoading(true);
    try {
      const res = await axios.get('http://localhost:8000/payment/all');
      const fixedData = res.data.map((payment: any) => ({
        ...payment,
        subscription_status: (payment.subscription_status || 'free') as 'free' | 'plus' | 'premium',
      }));
      setPayments(fixedData);
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (adminId) {
      fetchPayments();
    }
  }, [adminId]);

  const handleSubscriptionChange = (paymentId: number, userId: number, newStatus: string) => {
    const updatedPayments = payments.map((p) =>
      p.id === paymentId ? { ...p, subscription_status: newStatus as 'free' | 'plus' | 'premium' } : p
    );
    setPayments(updatedPayments);

    updateUserSubscription(userId, newStatus)
      .then(() => console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${newStatus}`))
      .catch((error) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error));
  };

  return (
    <div>
      {/* üî• –®–∞–ø–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h5" gutterBottom>üí∏ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</Typography>
        <Button
          variant="outlined"
          size="small"
          onClick={fetchPayments}
          disabled={loading}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </Box>

      {/* üî• –¢–∞–±–ª–∏—Ü–∞ */}
      <TableContainer component={Paper} sx={{ maxHeight: 440 }}>
        <Table stickyHeader size="small">
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID)</TableCell>
              <TableCell>–ü–æ–¥–ø–∏—Å–∫–∞</TableCell>
              <TableCell>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</TableCell>
              <TableCell>–°—É–º–º–∞</TableCell>
              <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
              <TableCell>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</TableCell>
              <TableCell>–î–∞—Ç–∞</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {payments.map((payment) => (
              <TableRow key={payment.id}>
                <TableCell>{payment.id}</TableCell>
                <TableCell>{payment.user_id}</TableCell>
                <TableCell>
                  <Select
                    size="small"
                    value={payment.subscription_status || 'free'}
                    onChange={(e) => handleSubscriptionChange(payment.id, payment.user_id, e.target.value)}
                    variant="standard"
                    disableUnderline
                    sx={{ minWidth: 140 }}
                  >
                    <MenuItem value="free">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</MenuItem>
                    <MenuItem value="plus">Plus (99 –≥—Ä–Ω)</MenuItem>
                    <MenuItem value="premium">Premium (199 –≥—Ä–Ω)</MenuItem>
                  </Select>
                </TableCell>
                <TableCell>{payment.method || '‚Äî'}</TableCell>
                <TableCell>{payment.amount !== null ? `${payment.amount} ${payment.currency}` : '‚Äî'}</TableCell>
                <TableCell>
                  {payment.status === 'success' ? (
                    <Chip label="–£—Å–ø–µ—à–Ω–æ" color="success" size="small" />
                  ) : payment.status === 'pending' ? (
                    <Chip label="–û–∂–∏–¥–∞–Ω–∏–µ" color="warning" size="small" />
                  ) : (
                    <Chip label="–û—à–∏–±–∫–∞" color="error" size="small" />
                  )}
                </TableCell>
                <TableCell>{payment.transaction_id || '‚Äî'}</TableCell>
                <TableCell>{new Date(payment.timestamp).toLocaleString()}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
};

export default PaymentsTable;

